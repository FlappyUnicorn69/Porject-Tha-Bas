COMANDI

git status  —> mostra cosa è cambiato nella Working area e cosa è caricato nella Staging area pronto ad essere committato
git add .  —> aggiungo le modifiche della Working area nella Staging Area.   se metto il (.) sto aggiungendo tutti i cambiamenti, altrimenti dovrei mettere il nome del file modificato 
git commit -m” “ —> per fare commit e aggiungere un messaggio nel commit (indispensabile per identificare a cosa si riferisce il commit
git log  —>   vedo il workflow dei commit effettuati
git show  —>  mi mostra il commit HEAD
git show (id) —> mi mostra il commit con quell’ id
git diff (id1)..(id2)  —>  vedo cosa è cambiato dal primo commit al secondo commit (fare attenzione che id2 sia il l’ultimo commit,  altrimenti vedo le modifiche all’incontrario)
vi (nome_file)  —> creo o apro (se esiste già) un file dentro vi :  
	 I  —> per passare ad insert mode
	:x —> per chiudere e salvare le modifiche
	:q  —> per chiudere
	:q!  —>  per chiudere e ignorare le modifiche fatte e non salvate 
git branch —-> vedo quali branch ci sono
git branch (nome)  —> creo un nuovo branch di nome (nome)
git branch -D (nome)  —>   elimino il branch con nome (nome)
git branch -a   ---> per mostrare tutti i branch nache quelli del repository origin

git checkout branchB
git merge branchA   —>  per fare merge del branchA nel branchB

git tag (my_tag)    —> per creare un tag nel commit corrente
git tag -d (tag)  —> per cancellare un tag (non devo essere per forza sullo specifico commit con il tag ricercato

git log --pretty=oneline   —-> per vedere i commit fatti ognuno su una sola riga
git log --pretty=oneline --max-count=2
git log --pretty=oneline --since='5 minutes ago'

git log --pretty=oneline --until='5 minutes ago'
git log --pretty=oneline --author=<your name>
git log --pretty=oneline --all                  altri tipi di visualizzazione

cat (nomeFile) —> mi mostra il contenuto del file 

git chekout (id commit)  —> torno alla situazione di quel specifico commit
git checkout (tag) —> posso usare anche i tag per raggiungere un determinato commit
git checkout master   —-> torno alla situazione del commit master 
git reset (commit) —> (di default è mixed) resetta l'index ma non il working tree  
git rest –hard (id/tag..)  —> resetta l' index e working tree al commit desiderato
git commit –amend -m” “  —> per aggiornare le modifiche dell’ultimo commit senza avere come finele due commit separati ma solo uno
git mv (nomeFile) (destinazione)   —> per spostare un file.    è già tutto pronto per essere committato
git fetch  ---> prende gli ultimi cambiamenti da origin ma non fa il merge
git pull  ---> prende gli ultimi cambiamenti da origin e fa anche il merge
git pull --rebase  --->  fa il fetch e rebase

